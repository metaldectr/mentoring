group 'com.romario.mentoring'
version '1.0-SNAPSHOT'

apply plugin: 'spring-boot'
apply plugin: 'groovy'
apply plugin: 'eclipse'

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/schema/persons.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::xsd[]


task afterEclipseImport {
    dependsOn "genJaxb"
}

// tag::jaxb[]
configurations {
    jaxb
}

jar {
    baseName = 'rest-service'
    version =  project.version
    from genJaxb.classesDir
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:'
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework.boot:spring-boot:+"
    compile "org.springframework.boot:spring-boot-starter-web:+"
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile("wsdl4j:wsdl4j:1.6.1")
    jaxb("com.sun.xml.bind:jaxb-xjc:2.2.4-1")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile 'com.h2database:h2:1.3.148'
    compile 'net.sf.dozer:dozer:5.5.1'
    compile 'net.sf.dozer:dozer-spring:5.5.1'

    compile project(':model')
    compile project(':dao')

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.spockframework:spock-core:"
    testCompile "org.springframework:spring-test:"
    testCompile "com.jayway.jsonpath:json-path:"
    testCompile "com.jayway.jsonpath:json-path-assert:"
    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
}

buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:+"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
}

springBoot {
    mainClass = "com.romario.mentoring.service.boot.App"
}
